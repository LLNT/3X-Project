1.圣杖 0, 4, 6, 7
2.同行和放下
3.人交换
4.事件的嵌入和扫描：村访问、回合事件、回合开始时状态调整、战斗对话、遗言
5.转职   Clear
6.贴图替换   Clear
7.盗贼   Clear
8.火枪
9.炮
10.流程容器

流程控制

章节标题
=>
关前剧情
=>
战斗准备
=> 
战前剧情
=> 
战斗
=>
战后剧情
=>
存档
=>
据点

=>下一章
各个组件都有没有，有哪些由章节的metadata控制，
整个流程的运转由总体metadata控制

战斗事件 Battle B Clear
遗言事件 Defeated D Clear
村庄事件 Villages V Clear
宝箱事件 Treasures T Clear
制压事件 Seize S Clear
回合事件 Turns U 
通用事件 General G Clear
门事件 Doors O Clear
对话事件 Dialogs I Clear

每回合开始做：
扫描回合事件表，处理所有被触发的回合事件
扫描controller表，对所有回合角色：
1.如果角色在要塞上、王座上、城门上，增加HP并清除不良状态
2.中毒的角色减去int(MHP/8)，如果该值大于等于该角色HP，那么减小量变成HP-1（即剩下1）并且清除中毒状态
3.具有回复特技的角色增加HP
4.进行状态回合数自减，并清除回合数为0的状态
5.重置movable和controller表
6.修改好感度
扫描并处理通用事件
循环，直到所有狂乱的角色进入movable表：
把狂乱的角色发给AIcontroller中的特定函数，采取固定的狂乱策略行动，每次执行行动之后修改角色的position表和movable表，之后扫描并处理通用事件
当前是玩家行动（controller==0）则给玩家行动，否则交给AIcontroller的一般决策器

事件条件的写法变更和判定器变更：
现在规定
Condition==[]为永假式（永远不能满足的条件）
Condition==[[[],[]]]为重言式（自动满足的条件）
并且eventlist.json文件和check_condition()函数做了相应变更
这只是一种出于方便的写法，并没有什么特别的原因，其目的在于回避在flag表中插入永真变量或者永假变量

